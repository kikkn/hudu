# Based on the original script by Kelvin Tegelaar https://github.com/KelvinTegelaar/AutomaticDocumentation
#####################################################################
# Get a Hudu API Key from https://yourhududomain.com/admin/api_keys
$HuduAPIKey = ""
# Set the base domain of your Hudu instance without a trailing /
$HuduBaseDomain = "https://docs.backit.no/"
$HuduAssetLayoutName = "M365 - MFAStatus"
#####################################################################
########################## Azure AD ###########################
$customerExclude =@("Example Cuystomer 1","Example Customer 4")
$ApplicationId = ""
$ApplicationSecret = ConvertTo-SecureString -AsPlainText "" -Force
$TenantID = ""
$RefreshToken = ""
#notused
#$ExchangeRefreshToken = ""
$upn = ''

# Check if the MSOnline PowerShell module has already been loaded.
if ( ! ( Get-Module MSOnline) ) {
    # Check if the MSOnline PowerShell module is installed.
    if ( Get-Module -ListAvailable -Name MSOnline ) {
        Write-Host -ForegroundColor Green "Loading the Azure AD PowerShell module..."
        Import-Module MsOnline
    } else {
        Install-Module MsOnline
    }
}

#Get the Hudu API Module if not installed
if (Get-Module -ListAvailable -Name HuduAPI) {
		Import-Module HuduAPI 
	} else {
		Install-Module HuduAPI -Force
		Import-Module HuduAPI
	}
  

#Connect to your Azure AD Account.
$credential = New-Object System.Management.Automation.PSCredential($ApplicationId, $ApplicationSecret)
$aadGraphToken = New-PartnerAccessToken -ApplicationId $ApplicationId -Credential $credential -RefreshToken $refreshToken -Scopes 'https://graph.windows.net/.default' -ServicePrincipal -Tenant $tenantID
$graphToken = New-PartnerAccessToken -ApplicationId $ApplicationId -Credential $credential -RefreshToken $refreshToken -Scopes 'https://graph.microsoft.com/.default' -ServicePrincipal -Tenant $tenantID


Connect-MsolService -AdGraphAccessToken $aadGraphToken.AccessToken -MsGraphAccessToken $graphToken.AccessToken

$customers = Get-MsolPartnerContract -all

Write-Host "Found $($customers.Count) customers in Partner Center." -ForegroundColor DarkGreen

#Set Hudu logon information
New-HuduAPIKey $HuduAPIKey
New-HuduBaseUrl $HuduBaseDomain

#############################################################
#                     Layout definering                     #
#############################################################

$Layout = Get-HuduAssetLayouts -name $HuduAssetLayoutName



if (!$Layout) { 
    $AssetLayoutFields = @(
        
        # "show_in_list" bestemmer hvilke felder som er synn lige i Layout som lister kunder.
        # den rÃ¸rer ikke synlighet for selve tabellene med data.
        #######################################################
        # Her starter $sistesync
        @{
            label        = 'Siste Sync'
            field_type   = 'RichText'
            show_in_list = 'false'
            position     = 1
        },
        #######################################################
        # Her starter $customer_tenantID & PrimaryDomain
        @{
            label        = 'Tenant ID'
            field_type   = 'RichText'
            show_in_list = 'false'
            position     = 2
        },
        @{
            label        = 'Primary Domain Name'
            field_type   = 'RichText'
            show_in_list = 'false'
            position     = 3
        },
        #######################################################
        # Her starter $tenantObj
        @{
            label        = 'Tenant info'
            field_type   = 'RichText'
            show_in_list = 'true'
            position     = 4
        },
        #######################################################
        # Her starter $UserObj
        @{
            label        = 'Users'
            field_type   = 'RichText'
            show_in_list = 'false'
            position     = 5
        },
        #######################################################
        # Her starter $conditionalAccessObj
        @{
            label        = 'Conditional'
            field_type   = 'RichText'
            show_in_list = 'false'
            position     = 6
        },
        #######################################################
        # Her starter $customObj
        @{
            label        = 'CustomControl'
            field_type   = 'RichText'
            show_in_list = 'false'
            position     = 7
        }
    )

    # Skriver layout rekkefÃ¸lge (med html) til variablene under.
    Write-Host "Creating New Asset Layout"                              #html stilsetting (CSS), og flags som sier hva slags vedlegg som er mulig Ã¥ inkludere.
    $NewLayout = New-HuduAssetLayout -name $HuduAssetLayoutName -icon "fas fa-sitemap" -color "#64FF69" -icon_color "#000000" -include_passwords $false -include_photos $false -include_comments $false -include_files $false -fields $AssetLayoutFields
    $Layout = Get-HuduAssetLayouts -name $HuduAssetLayoutName
}


foreach ($customer in $customers) {

    #Check if customer should be excluded
	if (-Not ($customerExclude -contains $customer.DisplayName)){
        #First lets check for the company
		#Check if they are in Hudu before doing any unnessisary work
		$defaultdomain = $customer.DefaultDomainName
		$hududomain = Get-HuduWebsites -name "https://$defaultdomain"
		if ($($hududomain.id.count) -gt 0) {

    Write-Host "Found $($customer.Name) in Partner Center" -ForegroundColor Green
    $CustomerToken = New-PartnerAccessToken -ApplicationId $ApplicationId -Credential $credential -RefreshToken $refreshToken -Scopes 'https://graph.microsoft.com/.default' -Tenant $customer.TenantID
    $headers = @{ "Authorization" = "Bearer $($CustomerToken.AccessToken)" }
    $domain = $customer.DefaultDomainName
    $customerdomains = Get-MsolDomain -TenantId $customer.TenantID
    $PrimaryDomain = ($customerdomains | Where-Object { $_.IsDefault -eq $true }).name
    $Users = (Invoke-RestMethod -Uri 'https://graph.microsoft.com/v1.0/users?$top=999' -Headers $Headers -Method Get -ContentType "application/json").value | Select-Object DisplayName, proxyaddresses, AssignedLicenses, userprincipalname
    $MFAStatus = Get-MsolUser -all -TenantId $customer.TenantId | Select-Object DisplayName,UserPrincipalName,@{N="MFA Status"; E={if( $_.StrongAuthenticationRequirements.State -ne $null) {$_.StrongAuthenticationRequirements.State} else { "Disabled"}}}
    $SSPRstatus = get-msolcompanyinformation | Select-Object selfservepasswordresetenabled
    
    
    write-host "Grabbing Potential Conditional Access MFA Registration for $($Customer.name)" -ForegroundColor Green
    try{
    $uri = "https://graph.microsoft.com/beta/reports/credentialUserRegistrationDetails"
    #old one $MFA2 = (Invoke-RestMethod -Uri $uri -Headers $headers -Method Get).value | Select-Object userPrincipalName, isMfaRegistered, @{N="MFA Registration Status"; E={if( $_.isMfaRegistered -ne $null) {$_.isMfaRegistered } else { "Disabled"}}}
    $MFA2 = (Invoke-RestMethod -Uri $uri -Headers $headers -Method Get).value | Select-Object userPrincipalName, isMfaRegistered, @{N="MFA Registration Status"; E={if( $_.isMfaRegistered -ne $null) {$_.isMfaRegistered } else { "Disabled"}}}, authMethods,@{N="AuthMethods Status"; E={if( $_.AuthMethods -ne $null) {$_.AuthMethods } else { "None"}}}, isRegistered,@{N="Registered for SSPR"; E={if( $_.isRegistered -ne $null) {$_.isRegistered }}}, isEnabled, @{N="SSPR Active"; E={if( $_.isEnabled -ne $null) {$_.isEnabled }}}
} catch {
    Write-Host "$($customer.name) does not have Azure AD P1 licensing, kinda stupid"
    }


            write-host "Grabbing Conditional Access Policies $($Customer.name)" -ForegroundColor Green
    try{
    $CAPolicy = (Invoke-RestMethod -Uri 'https://graph.microsoft.com/v1.0/identity/conditionalAccess/policies?$count=true' -Headers $Headers -Method Get -ContentType "application/json").value| Select-Object count, grantControls, displayName, createdDateTime, modifiedDateTime, state
    $CAPolicy2 = $CAPolicy.grantControls
    $duoMFA = $CAPolicy2. customAuthenticationFactors
    $customer | Add-Member ConditionalAccessPolicies $CAPolicy.count
    $customer | Add-Member CustomControl $duoMFA
    } catch {
       Write-Host "$($customer.name) does not have Azure AD P1 licensing, lmao"
    }


    write-host "Grabbing Security Defaults Policy for $($Customer.name)" -ForegroundColor Green
    $uri = "https://graph.microsoft.com/v1.0/policies/identitySecurityDefaultsEnforcementPolicy"
    $Data2 = Invoke-RestMethod -Uri $uri -Headers $Headers -Method Get | Select-Object isEnabled
    $customer | Add-Member SecurityDefaultsEnabled $Data2.isEnabled

    $UserObj = foreach ($user in $users) {
        [PSCustomObject]@{
            'Display name'      = $user.displayname
            'Mail'              =$user.userPrincipalName
            "Legacy MFA Enabled"       = ($MFAStatus | Where-Object { $_.UserPrincipalName -eq $user.userPrincipalName}).'MFA Status'
            "MFA Registered through Security Defaults or CA Policy" = ($MFA2 | where-object { $_.userPrincipalName -eq $user.userPrincipalName}).'MFA Registration Status'
			"AuthMethods" = ($MFA2 | where-object { $_.userPrincipalName -eq $user.userPrincipalName}).'AuthMethods Status'
            "Registered for SSPR" = ($MFA2 | where-object { $_.userPrincipalName -eq $user.userPrincipalName}).'Registered for SSPR'
            "SSPR Enabled" = ($MFA2 | where-object { $_.userPrincipalName -eq $user.userPrincipalName}).'SSPR Active'
        }
         $tenantObj= [PSCustomObject]@{
          'Customer Name' = $customer.name
          'Security Defaults Enabled' = $customer.SecurityDefaultsEnabled
          'Conditional Access Policies' = $customer.ConditionalAccessPolicies
      } 
    $conditionalAccessObj = foreach ($policy in $CAPolicy) {
        [PSCustomObject]@{
            'Conditional Access Policy' = $policy.displayname
            'State' = $policy.state
            'Created Date' = $policy.createdDateTime
            'Modified Date' = $policy.modifiedDateTime
        }

    $customObj = [PSCustomObject]@{
            'CustomControl'  = $CAPolicy.grantControls.customAuthenticationFactors
        }
    }
}

#######################################################################
#  lager et custom objekt, sammen satt av 2 andre objekter/variabler  #
#######################################################################


$Merge = @(
    #lager dataen som skal inn i et objekt                                        #henter objekt-feltet vi Ã¸nsker fra "more data"
    @{Customer_Name = ($Customer.name); Security_Default_Enabled = ($Customer.SecurityDefaultsEnabled); Conditional_Access_Policies = $($Customer.ConditionalAccessPolicies); Self_service_password_reset = $($SSPRstatus.SelfServePasswordResetEnabled) }) | % { New-Object object | Add-Member -NotePropertyMembers $_ -PassThru }

       #formaterer objektet til en tabell
$TenantInfo = $Merge | Format-Table | Out-String

#printer tabellen
#$TenantInfo



################################################################
#    SKRIVER TABELLEN PÃ… HUDU
################################################################

    $TableHeader = "<table style=`"width: 100%; border-collapse: collapse; border: 1px solid black;`">"
    $Whitespace = "<br/>"
    $TableStyling = "<th>", "<th style=`"background-color: #00adef; border: 1px solid black;`">"
    # her formaterer skripet info fra api for variablene satt fÃ¸rst pr linje. slik at de passer til en HTML tabell
    # den finner riktig plas fra API'et over via "select-object"
    # om ikke man har et relect parameter, velger den all data fra Objektet


    
    #lagrer og formaterer print objektet
    $today = Get-Date
    #$printDato = write-host "Siste Sync: "  $today
    # Siste sync
    $lastsync = $today | Select-Object 'DateTime' | convertto-html -fragment | out-string
    $lastsync = $TableHeader + ($today -replace $TableStyling) + $Whitespace
    

    # Tenant ID
    $customer_tenantID = $customer.$TenantID | convertto-html -fragment | out-string
    $customer_tenantID = $TableHeader + ($customer_tenantID -replace $TableStyling) + $Whitespace

    # Normal users
    $NormalUsers = $userobj | ConvertTo-Html -Fragment | Out-String
	$NormalUsers = $TableHeader + ($NormalUsers -replace $TableStyling) + $Whitespace

    # Tenant - og all info fra tenant | og bruker det objektet vi definerte pÃ¥ linje 206.
    $tenantObj = $Merge | Select-Object 'Customer_Name', 'Security_Default_Enabled', 'Conditional_Access_Policies', 'Self_Service_Password_Reset' |  convertto-html -Fragment  | out-string
    $tenantObj = $TableHeader + ($tenantObj -replace $TableStyling) + $Whitespace

    # Conditional Access. (Tilgangs Policies)
    $conditionalAccessObj = $conditionalAccessObj | select-object 'Conditional Access Policy', 'State', 'Created Date','Modified Date'  | convertto-html -Fragment  | out-string
    $conditionalAccessObj = $TableHeader + ($conditionalAccessObj -replace $TableStyling) + $Whitespace

    # Custom (om de bruker 3rd party tools)
    $customObj = $customObj | select-object 'CustomControl' | convertto-html -Fragment  | out-string
    $customObj = $TableHeader + ($customObj -replace $TableStyling) + $Whitespace


    

			# Populate Asset Fields
			$AssetFields = @{
                'Siste Sync'           = $lastsync
                'primary_domain_name'  = $PrimaryDomain
				'Tenant ID'            = $customer.TenantId
				'users'                = $NormalUsers
				'Tenant_info'          = $tenantObj
				'Conditional'          = $conditionalAccessObj
				'CustomControl'        = $customObj
			}
	
			$companyid = $hududomain.company_id
			#Check if there is already an asset	
			$Asset = Get-HuduAssets -name $PrimaryDomain -companyid $companyid -assetlayoutid $Layout.id
	
			#If the Asset does not exist, we edit the body to be in the form of a new asset, if not, we just upload.
			if (!$Asset) {
				Write-Host "Creating new Asset"
				$Asset = New-HuduAsset -name $PrimaryDomain -company_id $companyid -asset_layout_id $Layout.id -fields $AssetFields	
			}
			else {
				Write-Host "Updating Asset"
				$Asset = Set-HuduAsset -asset_id $Asset.id -name $PrimaryDomain -company_id $companyid -asset_layout_id $layout.id -fields $AssetFields	
			}
														
		} else {
			write-host "https://$defaultdomain Not found in Hudu. Please add as a website under the relevant customer" -ForegroundColor Red
		}
	}
}
